<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <!--<section name="EcommCategoryLogQueryConfigurations" type="System.Configuration.NameValueSectionHandler"/>
    <section name="EcommProductLogQueryConfigurations" type="System.Configuration.NameValueSectionHandler"/>
    <section name="EcommProductAttributeLogQueryConfigurations" type="System.Configuration.NameValueSectionHandler"/>
    <section name="EcommProductSpecificationLogQueryConfigurations" type="System.Configuration.NameValueSectionHandler"/>
    <section name="ControlMasterQueryConfigurations" type="System.Configuration.NameValueSectionHandler"/>
    <section name="SalesQueryConfigurations" type="System.Configuration.NameValueSectionHandler"/>
    <section name="CartQueryConfigurations" type="System.Configuration.NameValueSectionHandler"/>
    <section name="DocumentMasterQueryConfigurations" type="System.Configuration.NameValueSectionHandler"/>
    <section name="VoucherQueryConfigurations" type="System.Configuration.NameValueSectionHandler"/>
    <section name="ProjectQueryConfigurations" type="System.Configuration.NameValueSectionHandler"/>
    <section name="TaxQueryConfigurations" type="System.Configuration.NameValueSectionHandler"/>
    <section name="OrganizationQueryConfigurations" type="System.Configuration.NameValueSectionHandler"/>
    <section name="DiscountQueryConfigurations" type="System.Configuration.NameValueSectionHandler"/>
    <section name="PhotoMosaicStockQueryConfigurations" type="System.Configuration.NameValueSectionHandler"/>
    <section name="PhotoMosaicGalleryQuerySettings" type="System.Configuration.NameValueSectionHandler"/>
    <section name="AppointmentScheduleQuerySettings" type="System.Configuration.NameValueSectionHandler"/>
    <section name="MailMetaDataConfigQuerySettings" type="System.Configuration.NameValueSectionHandler"/>
    <section name="DeliveryConfigQuerySettings" type="System.Configuration.NameValueSectionHandler"/>
    <section name="TemplateConfigQuerySettings" type="System.Configuration.NameValueSectionHandler"/>
    <section name="ProductionBatchQuerySettings" type="System.Configuration.NameValueSectionHandler"/>-->
    <section name="BookQuerySettings" type="System.Configuration.NameValueSectionHandler"/>
    <!--<section name="BookChapterQuerySettings" type="System.Configuration.NameValueSectionHandler"/>********************************************-->
    <!-- <section name="BookReviewQueryConfigurations" type="System.Configuration.NameValueSectionHandler" />-->

  </configSections>
  <BookQuerySettings>
    <add key="GetStudentBySemCourseAndAddmissionYearId" value="select FirstName,LastName,StudentImagePath,StudentGuid,CourseName,SemesterName,SF.FessDocumentPath,SF.DueAmount from StudentFess SF
	    LEFT JOIN  StudentsAddmissionTBL SAT on SAT.Id = SF.StudentId
	    left join StudentSemsterTbl SS on SS.StudentId = SAT.Id
      left join CourseSemester CS on CS.ID = SS.SemesterId
      left join Course C on c.Id = CS.CourseId
      Where SAT.FirstName LIKE '%'+@Name+'%' and C.CourseGuid = @CourseGuid and CS.SemesterGuid = @SemesterGuid AND SAT.IsPassedOut != 1;">
    </add>

    <add key="GetStudentFDetails" value="select FirstName,LastName,StudentImagePath,AddmissionYear,CourseName,SemesterName,StudentGuid,SemesterGuid,Courseguid from StudentsAddmissionTBL SAT
      left join StudentSemsterTbl SS on SS.StudentId = SAT.Id
      left join CourseSemester CS on CS.ID = SS.SemesterId
      left join Course C on c.Id = CS.CourseId
      Where SAT.StudentGuid = @StudentGuid">
    </add>

    <add key="GetStudentFessDetails" value="select SemesterName,    PerSemesterFess,   Paid,DueFess,FineAmount,FessPaidDate from StudentsAddmissionTBL SAT
      left join StudentFess FS on FS.StudentId = SAT.Id
      left join Course c on c.Id = FS.CourseId 
      left join CourseSemester CS on CS.Id = FS.SemesterId
      Where SAT.StudentGuid = @StudentGuid">
    </add>

    <add key="CountryList" value="select CountryName , CountryGuid from Country">
    </add>

    <add key="CourseList" value="select CourseName , CourseGuid from Course WHERE IsDeleted = 0">
    </add>

    <add key="GenderList" value="select GenderName,GenderGuid from Gender">
    </add>

    <add key="SemesterList" value="select SemesterName,SemesterGuid from CourseSemester">
    </add>
    <add key="SemesterListById" value="SELECT SemesterName,SemesterGuid FROM CourseSemester WHERE CourseId IN (SELECT Id FROM Course WHERE CourseGuid = @CourseGuid)">
    </add>

    <add key="StateList" value="select StateName,StateGuid from [State]">
    </add>
    <add key="StateListById" value="select StateName,StateGuid FROM State WHERE CountryId IN (SELECT Id FROM Country WHERE CountryGuid = @StateGuid)">
    </add>

    <add key="CityList" value="select CityName,CityCode from City">
    </add>
    <add key="CityListById" value="select CityName,CityCode FROM City WHERE StateCode IN (SELECT Id FROM State WHERE StateGuid = @CityGuid)">
    </add>

    <add key="UserExistenseCheck" value="IF EXISTS(SELECT EmailId from UserTbl WHERE EmailId = @EmailID)
    select 1;
    ELSE
    select 0;"></add>
    
    <add key="AddNewRegistration" value="
      Declare @CityId int = (select Id from City Where CityCode = @CityCode)
      Declare @CountryId int = (select Id from Country Where CountryGuid = @CountryGuid)
      Declare @GenderId int = (select Id from Gender where GenderGuid = @Gender)
      Declare @StateId int = (select Id from State Where StateGuid = @StateGuid)
      insert into StudentsAddmissionTBL(ParentName, FirstName, MiddleName, LastName, Gender, BloodGroup, Cast, ContactNumber, ContactNumberOpt, DateOfBirth, AddressLine1, AddressLine2, City, Country, State, ZipCode, AddmissionYear, StudentImagePath, Email, StudentGuid) values
      (@ParentName, @FirstName, @MiddleName, @LastName, @GenderId, @BloodGroup, @Cast, @ContactNumber, @ContactNumberOpt, @DateOfBirth, @AddressLine1, @AddressLine2, @CityId, @CountryId, @StateId, @ZipCode, @AddmissionYear, @StudentImagePath, @Email, @StudentGuid)
      ;">
    </add>

    <add key="AddStudentRole" value="DECLARE @UID int = (select Id from StudentsAddmissionTBL WHERE StudentGuid = @StudentGuid)
	   DECLARE @RID int = (select Id from RolesList WHERE RoleGuid = @RoleGuid)
	   insert into UserRoles (UserId,RoleId,CreatedOn,CreatedBy) VALUES(@UID,@RID,@CreatedOn,@CreatedBy)"></add>

    <add key="AddStudentDocument" value="declare @StudentId int = (select Id from StudentsAddmissionTBL where StudentGuid = @Studentguid)
     insert into StudentQualificationDetails(StudentID, ImageDocumentPath, ExcelDocumentPath)
     values
     (@StudentId, @ImageDocumentPath, @ExcelDocumentPath);">
    </add>

    <add key="AddStudentFess" value="  DECLARE @CID int = (select Id from Course WHERE CourseGuid = @CrsId)
      DECLARE @SID int = (select Id from CourseSemester WHERE SemesterGuid = @SeId)
      DECLARE @StID int = (select Id from StudentsAddmissionTBL WHERE StudentGuid = @StuId)
	  INSERT INTO StudentFess (StudentId,SemesterId,CourseId,FineAmount,FessDocumentPath,DueAmount) VALUES(@StID,@SID,@CID,@FineAmount,@FessDocumentPath,@DueAmount)">
    </add>

    <add key="AddStudentSemster" value="declare @StudentId int = (select Id from StudentsAddmissionTBL where StudentGuid = @Studentguid)
     declare @CourseId int = (select Id from Course where CourseGuid = @Courseguid)
     declare @SemesterId int = (select Id from CourseSemester where SemesterGuid = @Semesterguid)
     insert into StudentSemsterTbl(StudentId, CourseId, SemesterId, SemesterStatus)
     values
     (@StudentId,@CourseId,@SemesterId,@SemesterStatus);">
    </add>

    <add key="GetClientRegsDetails" value="SELECT StudentName , StudentGuid ,EmailId , Password , PasswordSalt from UserTbl WHERE EmailId = @EmailId;"></add>

    <add key="CheckUserExistense" value="IF NOT EXISTS(SELECT EmailId from UserTbl WHERE EmailId = @EmailID)
    select 1;
    ELSE
    select 0;"></add>

    <add key="DeleteExistingToken" value="DELETE from TokensManager WHERE UserId IN(SELECT Id from UserTbl WHERE StudentGuid = @UserGuid);"></add>

    <add key="AddNewToken" value="INSERT INTO TokensManager(TokenKey, IssudOn, ExpireOn, CreatedOn, UserId) VALUES(@TokenKey, @IssudOn, @ExpiresOn, @CreatedOn, (SELECT Id from UserTbl WHERE StudentGuid = @UserGuid ));"></add>

    <add key ="RegisterNewUser" value ="
    DECLARE @GenderId int = (SELECT Id FROM Gender WHERE GenderGuid = @GenderGuid)     
    insert into UserTbl(StudentName,EmailId,StudentImagePath,StudentGuid,IsVerified,Password,PasswordSalt,Gender,CreatedOn) values(@StudentName,@EmailId,@StudentImagePath,@StudentGuid,@IsVerified,@Password,@PasswordSalt,@GenderId,@CreatedOn)"></add>

    <add key ="AdduserVerifiactionCode" value ="insert into IdentityVerification(IdentityCode,UserId) values(@IdentityCode,(select Id from UserTbl where StudentGuid = @guid))"></add>

    <add key="ActiveUserAccount" value="UPDATE UserTbl SET IsVerified = @IsVerified WHERE EmailId = @Email"></add>
    
    <add key ="fetchUserLoginData" value ="select RoleName,StudentName,StudentGuid,Password,PasswordSalt,StudentImagePath from UserTbl UT
     left join UserRoles UR on UR.UserId = UT.Id
     left join RolesList RL ON UR.RoleId = RL.Id
     where UT.EmailId = @EmailId"></add>

    <add key ="CheckUserVerify" value ="declare @verified int = (select Isverified from UserTbl where EmailId = @EmailId)
     if (@verified != 0 )
     select 1;
     else
     select 0;
    "></add>

    <add key ="IdentityVerification" value ="select Password , PasswordSalt from UserTbl where EmailId = @EmailId"></add>

    <add key="AddNewBooksInlibrary" value="declare @CId int = (select Id from Course where CourseGuid = @CourseGuid)
    insert into Books(BookName, AuthorName, BookImagePath, CourseId, TotalBooksQuantity, CurrentQuantity, CreatedBy, CreatedOn, BookGuid) 
    Values
    (@BookName, @AuthorName, @BookImagePath, @CId, @TotalBooksQuantity, @CurrentQuantity, @CreatedBy, @CreatedOn, @BookGuid)"></add>

    <add key="AddCopiesOfParentsBooksInLibrary" value="declare @BId int = (select Id from Books where BookGuid = @BookGuid)
    insert into BooksLists(BookId, BooksSerialNumber, CreatedBy, CreatedOn, BookGuid) 
    Values
    (@BId, @BooksSerialNumber, @CreatedBy, @CreatedOn, @BookGuid)"></add>

    <add key ="CheckLibraryCardExistance" value ="IF NOT EXISTS(select Id from libraryCard where StudentId IN (select Id from StudentsAddmissionTBL where StudentGuid = @StudentId))
    select 1;
    else
    select 0;"></add>

    <add key ="GetAllTypesOfBook" value ="select BookName , AuthorName , BookImagePath , TotalBooksQuantity, CurrentQuantity , CreatedBy, CreatedOn,BookGuid, CourseName from Books B
    inner join Course C On C.Id = B.CourseId"></add>

    <add key ="GetBooksByFilter" value ="select BookName, AuthorName, BooksSerialNumber,BookImagePath, TotalBooksQuantity, CurrentQuantity, BL.BookGuid from Books B
    left join BooksLists BL on BL.BookId = B.Id
    where B.BookGuid = @Code"></add>

    <add key ="GetNotReturnedBookDetails" value ="select B.BookName , B.AuthorName, SAt.FirstName , SAt.LastName , LR.BookDepositDate,BL.BooksSerialNumber,bl.BookGuid from LibraryRecords LR
    left join BooksLists BL on BL.Id = LR.BookId
    left join Books B on B.Id = BL.BookId
    left join StudentsAddmissionTBL SAt on SAt.Id = LR.StudentId
    where LR.IsReturned = 0"></add>

    <add key="CreateNewLibraryCard" value="declare @StudentId int = (select Id from StudentsAddmissionTbl where StudentGuid = @StudentRegId)
    declare @CourseId int = (select Id from Course where CourseGuid = @CourseGuid)
    insert into libraryCard(StudentId, CourseId, LibraryCardSerialNumber, CreatedBy, CreatedOn, IsDeleted,IsBookTaken,FineAmount) values(@StudentId, @CourseId, @LibraryCardSerialNumber, @CreatedBy, @CreatedOn, @IsDeleted,@IsBookTaken,@FineAmount)"></add>

    <add key="TakeBooksFromLibrary" value="declare @StudentId int = (select StudentId from LibraryCard where LibraryCardSerialNumber = @LibraryCardSerialNumber)
    declare @CourseId int = (select Id from Course where CourseGuid = @CourseGuid)
    declare @SemesterId int = (select Id from CourseSemester where SemesterGuid = @SemesterGuid)
    declare @LibraryCardId int = (select Id from libraryCard where LibraryCardSerialNumber = @LibraryCardSerialNumber)
    declare @BookId int = (select Id from BooksLists where BooksSerialNumber = @BooksSerialNumber)
    insert into LibraryRecords(StudentId, CourseId, SemesterId, LibraryCardId, BookId, BookTakenOn, BookDepositDate, IsReturned) 
    values(@StudentId, @CourseId, @SemesterId, @LibraryCardId, @BookId, @BookTakenOn, dateadd(day,7,@BookTakenOn), @IsReturned)"></add>

    <add key="UpdateTakenBooksCurrentQuantity" value="declare @BookID int = (select BookId from BooksLists where BooksSerialNumber = @BooksSerialNumber)
    update Books set CurrentQuantity = (CurrentQuantity -1) where Id = @BookID"></add>

    <add key="CheckUserAlreadyTakenBookOrNot" value="declare @takenOn int = (select IsBookTaken from libraryCard where LibraryCardSerialNumber = @LibraryCardSerialNumber)
	   if(@takenOn != 1)
	   select 1;
	   else
	   select 0;"></add>

    <add key="CheckBookIsAvailableOrNot" value="declare @BookQuantity int = (select CurrentQuantity from Books where Id IN (SELECT BookId from BooksLists WHERE BooksSerialNumber = @BookId))
	   if(@BookQuantity != 0)
	   select 1;
	   else
	   select 0;"></add>

    <add key="UpdateAttribute1" value="update libraryCard set IsBookTaken = 1 where LibraryCardSerialNumber = @LibraryCardSerialNumber"></add>

    <add key="UpdateReturnAndDepositDeta" value="declare @LibraryCardId int = (select Id from libraryCard where LibraryCardSerialNumber = @LibraryCardSerialNumber)
     declare @BookId int = (select Id from BooksLists where BooksSerialNumber = @BookSerialNumber)
     update LibraryRecords set BookDepositOn = @BookDepositOn , IsReturned = @IsReturned where LibraryCardId = @LibraryCardId and BookId = @BookId and IsReturned = 0"></add>

    <add key="ReadBookTakenDetails" value="declare @LibraryCardId int = (select Id from libraryCard where LibraryCardSerialNumber = @LibraryCardSerialNumber)
    declare @BookId int = (select Id from BooksLists where BooksSerialNumber = @BooksSerialNumber)
    select BookDepositDate , LC.FineAmount from LibraryRecords LR 
    inner join libraryCard LC On LR.LibraryCardId  = LC.Id
    where LR.LibraryCardId = @LibraryCardId and LR.BookId = @BookId and IsReturned = 0"></add>

    <add key="ResetBookTakenValue" value="update libraryCard set IsBookTaken = @IsBookTaken where LibraryCardSerialNumber = @LibraryCardSerialNumber"></add>

    <add key="UpdateFine" value="update libraryCard set FineAmount = @FineAmount where LibraryCardSerialNumber = @LibraryCardSerialNumber"></add>

    <!--<add key="CalculateFineAmountForTakenBooks" value="declare @LibraryCardId int = (select Id from libraryCard where LibraryCardSerialNumber = @LibraryCardSerialNumber)
    select sum(FineAmount) as FineAmount from LibraryRecords where LibraryCardId = @LibraryCardId"></add>-->

    <add key="ImageTypeDropDownList" value="select ImageType, TypeId from ImageType"></add>

    <add key="000025" value="select ImageType, TypeId from ImageType"></add>
    <!--fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff-->

    <add key="GetListOfBooksByBookNameAndAuthorName" value="select BK.BookName , BL.BookGuid ,BL.BooksSerialNumber , BK.AuthorName from BooksLists BL
    left join Books BK On BK.Id = BL.BookId
    where BK.BookName = @BookName and BK.AuthorName = @BookAuthorName"></add>

    <add key="GetNotRetunrndListOfBooksByBookNameAndAuthorName" value="select BK.BookName , BL.BookGuid ,BL.BooksSerialNumber , BK.AuthorName from BooksLists BL
    left join Books BK On BK.Id = BL.BookId
    left join LibraryRecords Lr on Lr.BookId = BL.Id
    where BK.BookName = @BookName and BK.AuthorName = @AuthorName and Lr.IsReturned = 0"></add>

    <add key="GetCourses" value="select CourseName, CourseGuid, PerSemesterFess, FullCourseFess, CourseDetails, CourseRequirements, TotalSemester, Duration, CourseImagePath,CourseType from Course WHERE IsDeleted != 1"></add>

    <add key="RelatedCourseList" value="select CourseName, CourseGuid, PerSemesterFess, FullCourseFess, CourseDetails, CourseRequirements, TotalSemester, Duration, CourseImagePath from Course
    where CourseGuid != @CourseId"></add>

    <add key="GetCoursesByCourseId" value="select CourseName, CourseGuid, PerSemesterFess, FullCourseFess, CourseDetails, CourseRequirements, TotalSemester, Duration, CourseImagePath from Course
    where CourseGuid = @CourseId"></add>

    <add key="GetCourseTeachersByCourseId" value="select RL.RoleName , T.TeacherName, S.SubectName,T.TeacherImagePath , T.SocialLink1,T.SocialLink2,T.SocialLink3,T.SocialLink4 from CourseTeachers CT
    left join Course C on c.Id = CT.CourseId
    left join Subjects S on s.Id = CT.SubjectId
    left join Teachers T on T.Id = CT.TeacherId
    left join RolesList RL on RL.Id = T.RoleId
    where CT.CourseId in (select CC.Id from Course CC where CC.CourseGuid = @CourseId)"></add>

    <add key="CheckUserPassedout" value="declare @IsPassedOutstudent bit = (select IsPassedOut from StudentsAddmissionTBL where Id in (select StudentId from LibraryCard where LibraryCardSerialNumber = @LibraryCardserialId))
	  if(@IsPassedOutstudent > 0)
	  select 0;
	  else
	  select 1;"></add>

    <add key="HomePageEventControl" value="select top 3 EventName , EventGuid, EventDate ,EventShortDescription,ImagePath,Location from ClgEvent where EventStatus =  'UpComing' order by EventDate "></add>

    <add key="HomePageCourseContent" value="select top 3 CourseName,CourseGuid,CourseIMagePath,CourseType from Course"></add>

    <add key="HomePageTeacherContent" value="select top 3 TeacherName,TeacherImagePath,RoleName,SocialLink1,SocialLink2,SocialLink3,SocialLink4 from Teachers T
    left join RolesList RL on RL.Id = T.RoleId"></add>

    <add key="RequestBooksLists" value="select B.BookName,SAT.FirstName,SAT.LastName,BL.BookGuid,BL.BooksSerialnumber,LC.LibraryCardSerialNumber,SAT.StudentGuid,RB.BookRequestDate,RB.BookTakenDate from RequestBooks RB 
    left join BooksLists BL on BL.Id = RB.BookId
    left join Books B on B.Id = BL.BookId
    left join StudentsAddmissionTBL SAT on SAT.Id = RB.StudentId
	  left join LibraryCard LC on LC.Id = RB.LibraryCardId
    where RB.IsBookTaken = 0"></add>

    <add key="SetForgetPasswordVerificationCode" value="DECLARE @UId int = (select Id from UserTbl WHERE EmailId = @UserId)
    INSERT INTO IdentityVerification(IdentityCode,UserId) VALUES (@VerificationCode,@UId)"></add>

    <add key="RetriveVerificationCode" value="DECLARE @UId int = (select Id from UserTbl WHERE EmailId = @Value)
    SELECT IdentityCode from IdentityVerification WHERE UserId = @UId"></add>

    <add key="RemoveUserVerificationCode" value="delete from IdentityVerification WHERE UserId in (select Id FROM UserTbl WHERE EmailId = @value)"></add>

    <add key="UpdatePassword" value="UPDATE UserTbl set Password = @Password , PasswordSalt = @PasswordSalt where EmailId = @CreatedBy"></add>

    <add key="UploadEventImages" value="DECLARE @EvID int = (select Id from ClgEvent where EventGuid = @Code)
    INSERT INTO EventGallery(ImageFolderPath,EventId,CreatedBy,CreatedOn) VALUES(@ImageFolderPath,@EvID,@CreatedBy,@CreatedOn)"></add>

    <add key="s" value="select EventName , EventGuid, EventDate ,EventShortDescription,ImagePath,Location from ClgEvent order by EventDate"></add>

    <add key="GetListOfCurrentEvents" value="select top 3 EventName , EventDate ,Location , EventDescription ,EventPlace, ImagePath,EventGuid, EventHeader from ClgEvent where EventStatus = 'Current' order by Eventdate"></add>

    <add key="GetAllCurrentEvents" value="select EventName , EventDate ,Location , EventDescription , ImagePath,EventGuid from ClgEvent where EventStatus = 'Current' order by Eventdate"></add>

    <add key="GetListOfUpcomingEvents" value="select EventName , EventDate ,Location , EventDescription , ImagePath,EventGuid from ClgEvent where EventStatus = 'UpComing'"></add>

    <add key="CreateNewEvent" value="insert into ClgEvent(EventName, EventPlace, EventStatus, EventDate, EventDescription, EventExpireDate, Location, PreRegistration, ImagePath, EventGuid, EntryFee, EventHeader)
    values
    (@EventName, @EventPlace, @EventStatus, @EventDate, @EventDescription, @EventExpireDate, @Location, @PreRegistration, @ImagePath, @EventGuid, @EntryFee, @EventHeader)"></add>

    <add key="CreateEventSchedule" value="DECLARE @EVID int = (select Id from ClgEvent WHERE EventGuid = @Guid)
    insert into EventSchedule(EventId, EventScheduleName, StartingTime, EndingTime, EventDate, TotalInvitations,ScheduleGuid) 
    VALUES (@EVID,@EventScheduleName,@StartingTime, @EndingTime, @EventDate, @TotalInvitations,@ScheduleGuid)"></add>

    <add key="AdminPortalDropdown" value="select BookName,BookGuid from Books"></add>

    <add key="ContactUsReportCreate" value="insert INTO ConractUs(CustomerName, CustomerEmail, ReportSubject, ReportDetails, ReportImagePath, CreatedBy, CreatedOn, ReportGuid, IsRead)
    VALUES
    (@CustomerName, @CustomerEmail, @ReportSubject, @ReportDetails, @ReportImagePath, @CreatedBy, @CreatedOn, @ReportGuid, @IsRead)"></add>

    <add key="UserRoleDropdown" value="SELECT RoleName,RoleGuid FROM RolesList"></add>

    <add key="AddNewTeacherForInst" value="DECLARE @RID int = (select RL.Id from RolesList RL WHERE RL.RoleGuid = @Code)
    insert into Teachers(TeacherName, Biography, RoleId, EmailId, PhoneNumber, SocialLink1, SocialLink2, SocialLink3, SocialLink4, TeacherGuid, TeacherImagePath, JoiningDate)
    VALUES
    (@TeacherName, @Biography, @RID, @EmailId, @PhoneNumber, @SocialLink1, @SocialLink2, @SocialLink3, @SocialLink4, @TeacherGuid, @TeacherImagePath, @JoiningDate)"></add>

    <add key="TeacherDropdown" value="SELECT TeacherName,TeacherGuid from Teachers"></add>
    <add key="SubjectListDropdown" value="select SubectName,SubectGuid from Subjects ORDER BY SubectName"></add>

    <add key="GetNameFromGuid" value="select C.CourseName,CS.SemesterName from Course C
    LEFT JOIN CourseSemester CS on CS.CourseId = C.Id
    WHERE C.CourseGuid = @CourseGuid AND CS.SemesterGuid = @SemesterGuid"></add>

    <add key ="GetListOfCurrentAdmittedStudents" value="SELECT FirstName,LastName,CourseName,SemesterName,StudentGuid FROM StudentSemsterTbl SST
    LEFT JOIN StudentsAddmissionTBL SAT on SAT.Id = SST.StudentId
    LEFT JOIN Course C ON C.Id = SST.CourseId
    LEFT JOIN CourseSemester CS on CS.Id = SST.SemesterId
    WHERE SAT.AddmissionYear = @Year ORDER BY C.CourseName"></add>

    <add key ="GetListOfPassedOutStudents" value="SELECT FirstName,LastName,CourseName,SemesterName,StudentGuid FROM StudentSemsterTbl SST
    LEFT JOIN StudentsAddmissionTBL SAT on SAT.Id = SST.StudentId
    LEFT JOIN Course C ON C.Id = SST.CourseId
    LEFT JOIN CourseSemester CS on CS.Id = SST.SemesterId
    WHERE SAT.AddmissionYear = @Year AND SAT.IsPassedOut != 0 and SAT.StreamId in (SELECT CC.Id from Course CC WHERE CC.CourseGuid = @CourseGuid)"></add>

    <add key="AdminPortalTeacherListQuery" value="select T.TeacherName,T.TeacherGuid,T.TeacherImagePath,RL.RoleName,RL.RoleGuid from Teachers T
				 LEFT JOIN RolesList RL on RL.Id = T.RoleId
				 WHERE T.IsResigned != 1"></add>

    <add key="AdminPortalTeacherListQueryByTeacherId" value="SELECT TeacherName , TeacherGuid, TeacherImagePath, SocialLink1,SocialLink2,SocialLink3,SocialLink4,JoiningDate FROM Teachers WHERE TeacherGuid = @TeacherId"></add>

    <add key="AdminPortalTeacherCourseDetailsListQueryByTeacherId" value="SELECT C.CourseName,C.CourseGuid,CS.SemesterName,CS.SemesterGuid,S.SubectName,s.SubectGuid  FROM CourseTeachers CT
				 LEFT JOIN Course C ON C.Id = CT.CourseId
				 LEFT JOIN CourseSemester CS ON CS.Id = CT.SemesterId
				 LEFT JOIN Subjects S ON s.Id = CT.SubjectId
				 WHERE CT.TeacherId in (SELECT ID FROM Teachers WHERE TeacherGuid = @TeacherId)"></add>

    <add key="RemoveTeacherFromCourse" value="DELETE FROM CourseTeachers WHERE TeacherId in (SELECT Id FROM Teachers WHERE TeacherGuid = @TeacherGuid) and CourseId in (SELECT Id FROM Course WHERE CourseGuid = @CourseGuid) and SemesterId IN (SELECT ID FROM CourseSemester WHERE SemesterGuid = @SemesterGuid) and SubjectId IN (SELECT Id FROM Subjects WHERE SubectGuid = @SubectGuid)"></add>

    <add key="CheckIsCourseNameAvailable" value="IF Exists (select CourseName from Course WHERE CourseName = @Name)
     SELECT 0;
     else
     SELECT 1;"></add>

    <add key="AddNewCourse" value="INSERT INTO Course (CourseName, CourseGuid, PerSemesterFess, FullCourseFess, CourseDetails, CourseRequirements, TotalSemester, Duration, CourseImagePath, CourseType) 
    VALUES
    (@CourseName, @CourseGuid, @PerSemesterFess, @FullCourseFess, @CourseDetails, @CourseRequirements, @TotalSemester, @Duration, @CourseImagePath, @CourseType)"></add>

    <add key="AddNewCourseSemester" value="DECLARE @CID int = (SELECT Id from Course WHERE CourseGuid = @CourseId)
    INSERT INTO CourseSemester(CourseId, SemesterName, SemesterGuid) VALUES(@CID,@SemesterName, @SemesterGuid)"></add>

    <add key="DeleteCourse" value="UPDATE Course SET IsDeleted = 1 WHERE CourseGuid = @CID"></add>

    <add key="GetDeletedCourselist" value="select CourseName, CourseGuid, PerSemesterFess, FullCourseFess, CourseDetails, CourseRequirements, TotalSemester, Duration, CourseImagePath from Course WHERE IsDeleted != 0"></add>

    <add key="EnrollDeletedCourse" value="UPDATE Course SET IsDeleted = 0 WHERE CourseGuid = @CID"></add>

    <add key="AddNewExamPaper" value="DECLARE @CID int = (select Id FROM Course WHERE CourseGuid = @StreamGuid)
    DECLARE @SID int = (select ID from CourseSemester WHERE SemesterGuid = @SemesterGuid)
    insert INTO QuestionPapers (PaperName,CourseId,SemesterId,CreatedBy,CreatedOn,ExamYear,PaperDestinationPath,SerialId)
    VALUES
    (@PaperName,@CID,@SID,@CreatedBy,@CreatedOn,@ExamYear,@PaperDestinationPath,@SerialId)"></add>

    <add key="GetExamPaperByExamId" value="DECLARE @CID int = (select Id FROM Course WHERE CourseGuid = @StreamGuid)
    DECLARE @SID int = (select ID from CourseSemester WHERE SemesterGuid = @SemesterGuid)
    SELECT QP.PaperName,QP.PaperDestinationPath,QP.ExamYear,C.CourseName,CS.SemesterName FROM QuestionPapers QP
    LEFT JOIN Course C ON c.Id = QP.CourseId
    LEFT JOIN CourseSemester CS ON CS.Id = QP.Id
    WHERE QP.ExamYear = @Value AND QP.CourseId = @CID AND QP.SemesterId = @SID"></add>

    <add key="DeleteNoticeByNoticeId" value="DELETE FROM Notice WHERE NoticeGuid = @NoticeId"></add>

    <add key="ListFilteredStudentslist" value="DECLARE @CID int = (select Id FROM Course WHERE CourseGuid = @Crsid)
    SELECT SAT.FirstName,SAT.MiddleName,SAT.LastName,C.CourseName,CS.SemesterName,SAT.StudentImagePath,SAT.StudentGuid from StudentSemsterTbl SST
    LEFT JOIN StudentsAddmissionTBL SAT ON  SAT.Id = SST.StudentId 
    LEFT JOIN Course C ON C.Id = SST.CourseId
    LEFT JOIN CourseSemester CS ON CS.Id = SST.SemesterId
    WHERE SST.CourseId = @CID AND SST.SemesterId IN (select Id FROM CourseSemester WHERE SemesterGuid LIKE '%'+@SId+'%') and SAT.AddmissionYear = @Year"></add>

    <add key="GetlistOfStudentsLibraryCardsByFilter" value="DECLARE @CID int = (select Id from Course WHERE CourseGuid = @CrsGuid)
    DECLARE @SID int = (select Id from CourseSemester WHERE SemesterGuid = @SemGuid)
    SELECT SAT.Id,SAT.FirstName,SAT.LastName,SAT.MiddleName,SAT.StudentImagePath,SAT.StudentGuid,LC.LibraryCardSerialNumber,LC.IsBookTaken,C.CourseName,CS.SemesterName from StudentSemsterTbl SST
    LEFT JOIN StudentsAddmissionTBL SAT  ON SAT.Id = SST.StudentId
    LEFT JOIN Course C ON C.Id = SST.CourseId
    LEFT JOIN CourseSemester CS on CS.Id = SST.SemesterId
    LEFT JOIN libraryCard LC ON LC.StudentId = SAT.Id
    WHERE SST.CourseId = @CID AND SST.SemesterId = @SID AND SAT.AddmissionYear = @Value and LC.IsDeleted = 0"></add>

    <add key="DeleteLibrayCardSerialNumber" value="UPDATE libraryCard SET IsDeleted = 1 WHERE LibraryCardSerialNumber = @LCID"></add>

    <add key="GetAllParentBooksLists" value="SELECT BookName,AuthorName,BookImagePath,CourseName,TotalBooksQuantity,BookGuid from Books"></add>

    <add key="GetstudentFessPathAndDetails" value="select FessDocumentPath,CourseName,SemesterName,C.PerSemesterFess,SF.DueAmount,SF.FineAmount from StudentFess SF
	  LEFT JOIN Course C ON C.Id = SF.CourseId
	  LEFT JOIN CourseSemester CS ON CS.Id = SF.SemesterId
	  WHERE StudentId in (SELECT Id from StudentsAddmissionTBL WHERE StudentGuid = @StudentGuid)"></add>

    <add key="GetStudentFineAmount" value="DECLARE @CID int = (select Id from Course WHERE CourseGuid = @CrsGuid)
      DECLARE @SID int = (select Id from CourseSemester WHERE SemesterGuid = @SemGuid)
	  SELECT LC.FineAmount AS LibraryFineAmount,SF.FineAmount AS FessFineAmount,SAT.FirstName, SAT.LastName ,SAT.StudentImagePath,SAT.StudentGuid,C.CourseName,CS.SemesterName FROM StudentsAddmissionTBL SAT
	  INNER JOIN StudentSemsterTbl SST ON SST.StudentId = SAT.Id
	  left join libraryCard LC ON LC.StudentId = SAT.Id
	  LEFT JOIN StudentFess SF ON LC.StudentId = SF.StudentId
	  LEFT JOIN Course C on C.Id = SST.CourseId
	  LEFT JOIN CourseSemester CS ON CS.Id = SST.SemesterId
	  WHERE SAT.FirstName LIKE '%'+@FirstName+'%' and SAT.LastName LIKE '%'+@LastName+'%' AND SST.SemesterId = @SID AND SST.CourseId = @CID"></add>

    <add key="GetStudentFessDocumentPath" value="SELECT LC.FineAmount AS LibraryFineAmount,SF.FineAmount AS FessFineAmount,SF.FessDocumentPath FROM StudentsAddmissionTBL SAT
	  left join libraryCard LC ON LC.StudentId = SAT.Id
	  LEFT JOIN StudentFess SF ON SF.StudentId = LC.StudentId
	  WHERE SAT.StudentGuid = @StudentGuid"></add>

    <add key="UpdateCourseData" value="UPDATE Course SET CourseName = @CourseName,PerSemesterFess = @PerSemesterFess,FullCourseFess = @FullCourseFess, CourseDetails = @CourseDetails, CourseRequirements = @CourseRequirements, TotalSemester = @TotalSemester, Duration = @Duration, CourseImagePath = @CourseImagePath, CourseType = @CourseType
    WHERE CourseGuid = @CRSID"></add>

    <add key="DeleteCourseSemester" value="DECLARE @CID int = (SELECT Id from Course WHERE CourseGuid = @CrsId)
    UPDATE CourseSemester set IsDeleted = 1 WHERE CourseId = @CID AND SemesterGuid = @StrId"></add>

    <add key="RetriveAllReports" value="SELECT CustomerName,CustomerEmail,ReportSubject,ReportDetails,ReportImagePath,ReportGuid,IsRead FROM ConractUs ORDER BY IsRead ASC"></add>
  
    <add key="UpdateReportReadStatus" value="UPDATE ConractUs set IsRead = 1 WHERE ReportGuid = @RepId"></add>
    <add key="GetNotReadNoticeAmount" value="SELECT COUNT(*) AS ReportAmount FROM ConractUs WHERE IsRead != 1"></add>

    <add key="GetListOfCollegeTeachers" value="select TeacherName , TeacherImagePath,TeacherGuid, TeacherImagePath, SocialLink1,SocialLink2,SocialLink3,SocialLink4,RoleName from Teachers T
    left join RolesList RL ON RL.ID = T.RoleId"></add>

    <add key="GetListOfCollegeTeachersById" value="select TeacherName,TeacherGuid,SocialLink1,SocialLink2,SocialLink3,SocialLink4,PhoneNumber,TeacherImagePath,EmailId,RoleName,Biography from Teachers T
    left join RolesList RL on RL.Id = T.RoleId where TeacherGuid = @TeacherGuid"></add>

    <add key="GetListOfCollegeTeachersCourseDetailsById" value="select SubectName from Subjects S
     left join CourseTeachers Ct on Ct.SubjectId = S.Id
     left join Teachers T On T.Id = Ct.TeacherId
     where Ct.TeacherId in (select Tc.Id from Teachers Tc where Tc.TeacherGuid = @TeacherGuid)"></add>

    <add key="GetTop3CourseList" value="select top 3 CourseName,CourseGuid,CourseImagePath,CourseDetails from Course"></add>

    <add key="GetListOfCollegeTeachersByHisCorrespondCourse" value="select T.ID ,TeacherName , TeacherGuid, TeacherImagePath, SocialLink1,SocialLink2,SocialLink3,SocialLink4,RoleName,CourseName from Teachers T
                left join RolesList RL ON RL.ID = T.RoleId
                left join CourseTeachers CT On CT.TeacherId = T.Id
                left join Course c on c.Id = CT.CourseId"></add>
    
    <add key="AddNewNewsLetter" value="insert INTO NewsLetter(EmailId,IsSubscribed) VALUES (@EmailId,@IsSubscribed)"></add>

    <add key="UpdateTeacherData" value="UPDATE Teachers SET TeacherName = @TeacherName,Biography = @Biography,SocialLink1 = @SocialLink1,SocialLink2 = @SocialLink2,SocialLink3 = @SocialLink3,SocialLink4 = @SocialLink4,
    TeacherImagePath = @TeacherImagePath WHERE TeacherGuid = @TeacherGuid"></add>

    <add key="AddNewTeacherCredential" value="DECLARE @TID int = (SELECT Id from Teachers WHERE EmailId = @Email)
    INSERT INTO TeachersTbl(TeacherEmail,[Password],PasswordSalt,TeacherId) VALUES(@TEmail,@Password,@PasswordSalt,@TID)"></add>

    <add key="CheckTeacherExistance" value="IF exists(SELECT Id FROM Teachers WHERE EmailId = @Email)
     SELECT 1;
     else
     SELECT 0;"></add>

    <add key="TeacherLoginData" value="SELECT TeacherName,TeacherGuid,TeacherImagePath,RoleName,EmailId,Password,PasswordSalt FROM Teachers T
    LEFT JOIN TeachersTbl TT ON TT.TeacherId = T.Id
    LEFT JOIN RolesList RL ON RL.Id = T.RoleId
    WHERE T.EmailId = @Email"></add>

    <add key="CheckStudentLoginExistense" value="IF NOT EXISTS(SELECT Id FROM StudentsTbl WHERE StudentRegNo = @RegNo)
    select 1;
    ELSE
    SELECT 0;"></add>

    <add key="RetriveStudentEmail" value="SELECT Email from StudentsAddmissionTBL WHERE StudentGuid = @StudentGuid"></add>

    <add key="AddStudentLoginCredentials" value="DECLARE @SID int = (select Id FROM StudentsAddmissionTBL WHERE StudentGuid = @RegId)
    INSERT INTO StudentsTbl(StudentRegNo,Password,PasswordSalt,StudentId,IsVerified) VALUES(@StudentRegNo,@Password,@PasswordSalt,@SID,@IsVerified)"></add>

    <add key="AddStudentVerificationCode" value="DECLARE @SID int = (select Id FROM StudentsAddmissionTBL WHERE StudentGuid = @RegId)
    INSERT INTO StudentsIdVerificationTbl(StudentId,VerificationCode) VALUES(@SID,@VerificationCode)"></add>

    <add key="RetriveStudentVerificationCode" value="DECLARE @SID int = (select Id FROM StudentsAddmissionTBL WHERE StudentGuid = @RegId)
    SELECT VerificationCode from StudentsIdVerificationTbl WHERE StudentId = @SID"></add>
  
    <add key="VerifyStudentAccount" value="DECLARE @StuID int = (select Id FROM StudentsAddmissionTBL WHERE StudentGuid = @StuRegId)
    UPDATE StudentsTbl SET IsVerified = 1 WHERE StudentId = @StuID"></add>

    <add key="DeleteUsedVerificationCode" value="DECLARE @StuId int = (select Id FROM StudentsAddmissionTBL WHERE StudentGuid = @StRegId)
    DELETE FROM StudentsIdVerificationTbl WHERE StudentId = @StuId"></add>

    <add key="GetStudentLoginDetails" value="SELECT SAT.FirstName,SAT.LastName,SAT.Email,SAT.StudentImagePath,SAT.StudentGuid,ST.Password,ST.PasswordSalt,RL.RoleName from StudentsAddmissionTBL SAT
    LEFT JOIN StudentsTbl ST ON ST.StudentId = SAT.Id
    LEFT JOIN RolesList RL ON RL.Id = ST.RoleId
    WHERE SAT.StudentGuid = @StRegId"></add>

    <add key="CheckStudentAccountVerification" value="DECLARE @Isverified bit = (select IsVerified from StudentsTbl WHERE StudentRegNo = @StudentRegId)
    IF(@Isverified > 0)
    select 1;
    else
    select 0;"></add>

    <add key="DeleteStudentExistingVerificationCode" value="DELETE FROM StudentsIdVerificationTbl WHERE StudentId IN (SELECT Id FROM StudentsAddmissionTBL WHERE StudentGuid = @StudentGuid)"></add>

    <add key="SetNewStudentVerificationCode" value="	DECLARE @StdId int = (select Id FROM StudentsAddmissionTBL WHERE StudentGuid = @StudentGuid)
	  INSERT INTO StudentsIdVerificationTbl (StudentId , VerificationCode) VALUES (@StdId,@VerificationCode)"></add>

    <add key="CheckStudentExistance" value="IF Exists (SELECT Id FROM StudentsTbl WHERE StudentRegNo = @StudentRegNo)
    SELECT 1;
    ELSE
    SELECT 0;"></add>

    <add key="GetEventGalleryEventsList" value="SELECT CE.EventName,CE.EventPlace,CE.ImagePath,CE.EventGuid,CE.EventDate FROM EventGallery EG
		LEFT JOIN ClgEvent CE ON CE.Id = EG.EventId"></add>

    <add key="GetEventGallery" value="SELECT CE.EventName,CE.EventPlace,CE.EventDate,EG.ImageFolderPath FROM EventGallery EG
		LEFT JOIN ClgEvent CE ON CE.Id = EG.EventId WHERE CE.EventGuid = @EventGuid"></add>

    <add key="DeleteExistingUserVerificationCode" value="DELETE FROM IdentityVerification WHERE UserId IN (SELECT Id FROM UserTbl WHERE EmailId = @UserEmailId)"></add>
    
    <add key="AddUserNewVerificationCode" value="INSERT INTO IdentityVerification (IdentityCode , UserId) VALUES (@VerificationCode, (SELECT Id FROM UserTbl WHERE EmailId = @UserEmailId))"></add>
  </BookQuerySettings>
</configuration>